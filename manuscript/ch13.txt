# Debug

Many people are creating apps without using even standard debugging techniques. We tend to stay as "puts debuggers" because it is easy, stable and reliable. But we lose a lot of troubleshooting productivity without good debugging skills. The first step is to discover the Pry (`binding.pry`) and Byebug (`byebug`) debuggers. They allow you to set a breakpoint, stop app execution there, and print out current variables on the stack. But debugging is not limited to breakpoints. The next step is learning how to walk step-by-step inside the app â€“ stepping into functions, etc.

Great results can be achieved by combining both of these solutions with [pry-byebug](https://github.com/deivid-rodriguez/pry-byebug), which adds the navigation commands from Byebug to the Pry command line.

The best debugging experience would be provided via a visual debugger, like in the IntelliJ RubyMine IDE. It requires an additional Gem, and the app must be run using a special launcher, but as a result you can set breakpoints and step through code right in your IDE. You can also see all the variables on the stack at each step. Such a high density of visual debug info can dramatically increase productivity, and decrease the time needed to track down an error.

* [Tenderlovemaking: I am a `puts` debuggerer](http://tenderlovemaking.com/2016/02/05/i-am-a-puts-debuggerer.html)
* [Debugging Rails Appliction](http://guides.rubyonrails.org/debugging_rails_applications.html)
* [Byebug](https://github.com/deivid-rodriguez/byebug)
* [Pry](https://github.com/pry/pry)
* [Ruby default debugger](http://ruby-doc.org/stdlib-2.3.0/libdoc/debug/rdoc/DEBUGGER__.html)
* [IntelliJ RubyMine Visual Debugger](https://www.jetbrains.com/help/ruby/2016.1/debugging.html)